@model NexsusEcommerce.Models.DashboardViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<style>
    /* Custom CSS for the dashboard */
    .container {
        width: 90%;
        margin: 0 auto;
        padding: 20px;
    }

    .card-body {
        padding: 20px;
    }

    .chart-container {
        position: relative;
        height: 400px;
    }

    .avatar {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
    }

    .avatar-initial {
        font-size: 20px;
        color: #fff;
    }

    .form-container {
        display: flex;
        gap: 20px; /* Space between the forms */
        flex-wrap: wrap; /* Allows forms to wrap on smaller screens */
        justify-content: space-between; /* Distributes space evenly */
    }

        .form-container form {
            flex: 1; /* Allows forms to take up available space */
            min-width: 250px; /* Ensures forms are not too narrow */
            padding: 15px; /* Adds padding inside each form */
         
        }

    .form-group {
        margin-bottom: 15px; /* Space between form fields */
    }

        .form-group label {
            display: block; /* Ensures label takes full width */
            margin-bottom: 5px; /* Space between label and input */
            font-weight: bold; /* Makes labels stand out */
        }

        .form-group input,
        .form-group select {
            width: 100%; /* Makes input fields and select take full width */
            padding: 8px; /* Adds padding inside input fields */
            border: 1px solid #ccc; /* Border around input fields */
            border-radius: 4px; /* Slightly rounded corners for input fields */
        }

    .btn {
        display: inline-block; /* Aligns button with the form */
        padding: 10px 20px; /* Padding inside button */
        font-size: 16px; /* Font size for button text */
        border: none; /* Removes default border */
        border-radius: 4px; /* Slightly rounded corners for button */
        cursor: pointer; /* Changes cursor to pointer on hover */
    }

    .btn-primary {
        background-color: #007bff; /* Primary button background color */
        color: #fff; /* Primary button text color */
    }

        .btn-primary:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }
</style>
<body>
    <div class="container">
        <div class="form-container">
            <form asp-action="Index" method="get">
                <div class="form-group">
                    <label for="category">Select Category</label>
                    <select name="categoryId" asp-for="SelectedCategoryId" class="form-control">
                        <option value="">-- Select Category --</option>
                        @foreach (var category in Model.Categories)
                        {
                            <option value="@category.CategoryId">@category.CategoryName</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="startDate">Start Date</label>
                    <input type="date" name="startDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="endDate">End Date</label>
                    <input type="date" name="endDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")" class="form-control" />
                </div>

                <button type="submit" class="btn btn-primary">Submit</button>
                     <form asp-action="Index1" method="post">
                <a asp-action="Index1"asp-controller="Dashboard"  class="btn btn-primary">Show Data in Pie Chart</a>
            </form>
            </form>

           
        </div>
        <div class="row mt-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Sales By Date</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="salesLineChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @* <div class="row">
        <!-- Order Statistics Card -->
        <div class="col-md-6 col-lg-4 col-xl-4 mb-6">
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between">
                    <div class="card-title mb-0">
                        <h5 class="mb-1 me-2">Order Statistics</h5>
                        <p class="card-subtitle">@Model.TotalSales.ToString("C") Total Sales</p>
                    </div>
                    <div class="dropdown">
                        <button class="btn text-muted p-0" type="button" id="orderStatistics" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="bx bx-dots-vertical-rounded bx-lg"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="orderStatistics">
                            <a class="dropdown-item" href="javascript:void(0);">Select All</a>
                            <a class="dropdown-item" href="javascript:void(0);">Refresh</a>
                            <a class="dropdown-item" href="javascript:void(0);">Share</a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-6">
                        <div class="d-flex flex-column align-items-center gap-1">
                            <h3 class="mb-1">@Model.TotalOrders</h3>
                            <small>Total Orders</small>
                        </div>
                        <div class="chart-container">
                            <canvas id="orderStatisticsChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- User Count by City Card -->
        <div class="col-md-6 col-lg-4 col-xl-4 mb-6">
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between">
                    <div class="card-title mb-0">
                        <h5 class="mb-1 me-2">User Count by City</h5>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="userBarChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
     *@
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Parse the sales data from the model
            const salesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.DayWiseSales));

            // Extract labels (dates) and data (sales amounts) from the salesData
            const labels = salesData.map(item => new Date(item.Date).toLocaleDateString());
            const data = salesData.map(item => item.TotalSales);

            // Get the baseline for the selected category from the model
            const baseline = @Model.Baseline;

            // Create the line chart
            const ctx = document.getElementById('salesLineChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Total Sales (Amount)',
                            data: data,
                            borderColor: '#42A5F5',
                            backgroundColor: 'rgba(66, 165, 245, 0.2)',
                            fill: true,
                            tension: 0.1,
                            borderWidth: 2
                        },
                        {
                            label: `Baseline ?${baseline.toLocaleString()}`,
                            data: Array(labels.length).fill(baseline),
                            borderColor: '#FF0000',
                            borderDash: [10, 5],
                            fill: false,
                            pointRadius: 0,
                            borderWidth: 2
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return `Sales: ?${tooltipItem.raw.toFixed(2)}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Date'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Total Sales Amount (?)'
                            },
                            beginAtZero: true
                        }
                    }
                }
            });
        });
            const orderStatsData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SalesByCategory));
            const orderLabels = orderStatsData.map(item => item.Category);
            const orderData = orderStatsData.map(item => item.TotalSales);

            const orderCtx = document.getElementById('orderStatisticsChart').getContext('2d');
            new Chart(orderCtx, {
                type: 'pie',
                data: {
                    labels: orderLabels,
                    datasets: [{
                        label: 'Sales by Category',
                        data: orderData,
                        backgroundColor: [
                            '#FF6384',
                            '#36A2EB',
                            '#FFCE56',
                            '#4BC0C0',
                            '#F7464A',
                            '#8E5EA2',
                            '#3B8BEB'
                        ],
                        borderColor: '#fff',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top'
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return tooltipItem.label + ': ' + tooltipItem.raw.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
                                }
                            }
                        }
                    }
                }
            });

            // Data for the User Count by City Bar Chart
            const userCountData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.UserCountByCity));
            const cityLabels = userCountData.map(item => item.City);
            const userData = userCountData.map(item => item.UserCount);

            const userCtx = document.getElementById('userBarChart').getContext('2d');
            new Chart(userCtx, {
                type: 'bar',
                data: {
                    labels: cityLabels,
                    datasets: [{
                        label: 'User Count by City',
                        data: userData,
                        backgroundColor: '#42A5F5',
                        borderColor: '#1E88E5',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return tooltipItem.label + ': ' + tooltipItem.raw;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        </script>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
